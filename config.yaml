---
cog_bundle_version: 4

name: cogy
description: Auxiliary Cogy utilities. This is a native bundle.
long_description: |
  This bundles does two things

    1) contains the Cogy executable, a script that all Cogy-defined commands
       invocations are routed to
    2) provides a `install` command that can install the bundle that is
       generated from Cogy from your Rails application.


  Currently it's only ships as a native bundle but we may release a Docker
  version in the future.
version: "0.0.4"
config:
  notes: This bundle expects the following environment variables to be set
  env:
    - var: COGY_BACKEND
      description: "Used by the cogy command and is the Cogy engine endpoint
        served by your Rails application. For example if you mounted
        the Cogy engine by doing `mount Cogy::Engine, at: 'cogy'`, then
        `COGY_BACKEND should be set to 'http://your-site.com/cogy'"
commands:
  cogy:
    executable: "/srv/cogcmd/cogy/commands/cogy"
    description: This is the executable invoked by Cogy-defined commands
    long_description: |
      This command exists mainly as a placeholder so that the cogy script
      is shipped in the Relays. This is the script that Cogy-defined
      commands in your Rails application will end up invoking. So the
      `executable` config set above should match the `executable_path` option
      set in your Cogy configuration (see https://github.com/skroutz/cogy#configuration).


      What this script does is simply making a request to the Cogy endpoint
      in your Rails application, defined by `COGY_BACKEND` env. variable and
      return the results.


      All environment variables starting with 'COGY_' are also passed to the
      backend.
    rules:
      - "allow"
  install:
    executable: "/srv/cogcmd/cogy/commands/install"
    description: Install a bundle config from a remote location
    long_description: |
      This command was created so that we could easily install the bundle, given
      a bundle config that was generated from Cogy (ie. the inventory endpoint)
      and served by the Rails application.

      It accepts a --url option that should point to the path that the Cogy
      engine is mounted in your app, and is typically used in conjuction with a
      Cog Trigger so that installing a new bundle is automatically hooked in
      your deployment process.
    examples: "cogy:install --url 'http://myapp.com/cogy'"
    options:
      url:
        type: string
        required: true
        description: The URL where the Cogy engine is mounted
    rules:
      - "allow"

